(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{446:function(e,t,n){"use strict";n.r(t);var a=n(2),s=Object(a.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"elasticsearch-如何实现索引的伪·命名空间"}},[e._v("Elasticsearch 如何实现索引的伪·命名空间")]),e._v(" "),t("h1",{attrs:{id:"环境说明"}},[e._v("环境说明")]),e._v(" "),t("ul",[t("li",[e._v("jdk8")]),e._v(" "),t("li",[e._v("elasticsearch7.4.0")]),e._v(" "),t("li",[e._v("springboot 2.3.12.RELEASE")]),e._v(" "),t("li",[e._v("spring-data-elasticsearch 4.0.9.RELEASE")])]),e._v(" "),t("p",[e._v("注：本文不做特殊说明的情况下，client1与client2使用相同配置")]),e._v(" "),t("h1",{attrs:{id:"应用场景"}},[e._v("应用场景")]),e._v(" "),t("p",[e._v("在公司内部资源紧张的情况下，多个项目使用同一个elasticsearch并且数据互不干扰，实现资源的最大化利用，节约成本")]),e._v(" "),t("h1",{attrs:{id:"集成elasticsearch"}},[e._v("集成Elasticsearch")]),e._v(" "),t("h2",{attrs:{id:"pom-client1与client2相同"}},[e._v("pom（client1与client2相同）")]),e._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("\n    &lt;parent>\n        &lt;groupId>org.springframework.boot&lt;/groupId>\n        &lt;artifactId>spring-boot-starter-parent&lt;/artifactId>\n        &lt;version>2.3.12.RELEASE&lt;/version>\n        &lt;relativePath/> &lt;!-- lookup parent from repository --\x3e\n    &lt;/parent>\n    &lt;properties>\n        &lt;java.version>1.8&lt;/java.version>\n    &lt;/properties>\n    &lt;dependencies>\n        &lt;dependency>\n            &lt;groupId>org.springframework.boot&lt;/groupId>\n            &lt;artifactId>spring-boot-starter-web&lt;/artifactId>\n        &lt;/dependency>\n\n        &lt;dependency>\n            &lt;groupId>org.springframework.boot&lt;/groupId>\n            &lt;artifactId>spring-boot-starter-test&lt;/artifactId>\n            &lt;scope>test&lt;/scope>\n        &lt;/dependency>\n        &lt;dependency>\n            &lt;groupId>org.springframework.data&lt;/groupId>\n            &lt;artifactId>spring-data-elasticsearch&lt;/artifactId>\n            &lt;version>4.0.9.RELEASE&lt;/version>\n        &lt;/dependency>\n    &lt;/dependencies>\n\n")])])]),t("h2",{attrs:{id:"config-client1与client2相同"}},[e._v("config（client1与client2相同）")]),e._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('@Configuration\npublic class RestClientConfig extends AbstractElasticsearchConfiguration {\n    @Bean\n    @Override\n    public RestHighLevelClient elasticsearchClient() {\n        final ClientConfiguration clientConfiguration = ClientConfiguration.builder()\n                .connectedTo("localhost:9200")\n                .build();\n\n        return RestClients.create(clientConfiguration).rest();\n    }\n}\n\n')])])]),t("h2",{attrs:{id:"yml"}},[e._v("yml")]),e._v(" "),t("h3",{attrs:{id:"client1"}},[e._v("client1")]),e._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("spring.data.elasticsearch.client.namespace=client1\nserver.port=8081\n")])])]),t("h3",{attrs:{id:"client2"}},[e._v("client2")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("spring.data.elasticsearch.client.namespace=client2\nserver.port=8082\n")])])]),t("h2",{attrs:{id:"索引名定义-client1与client2相同"}},[e._v("索引名定义(client1与client2相同)")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("定义变量获取")]),e._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('@Configuration\npublic class EsConst {\n    @Value("${spring.data.elasticsearch.client.namespace}")\n    private String elasticsearchNamespace;\n    @Bean\n    public String getElasticsearchNamespace(){\n        return elasticsearchNamespace;\n    }\n}\n')])])])]),e._v(" "),t("li",[t("p",[e._v("新建User 实体类，指定索引名称为namespace.user")]),e._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('@Document(indexName = "#{@getElasticsearchNamespace}.user")\npublic class User {\n    @Field(type = FieldType.Text)\n    private String id;\n    @Field(type = FieldType.Text)\n    private String name;\n    @Field(type = FieldType.Text)\n    private String phone;\n    @Field(type = FieldType.Text)\n    private String namespace;\n\n// 省略get/set ......\n}\n\n')])])])])]),e._v(" "),t("h2",{attrs:{id:"增加测试方法findall与save"}},[e._v("增加测试方法findAll与save")]),e._v(" "),t("h3",{attrs:{id:"client1-2"}},[e._v("client1")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("Dao")]),e._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("@Repository\npublic interface UserDao extends CrudRepository&lt;User,String> {\n}\n")])])])]),e._v(" "),t("li",[t("p",[e._v("Service")]),e._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('@Service\npublic class TestService {\n    @Autowired\n    private UserDao userDao;\n    public void findAll(){\n        Iterable&lt;User> all = userDao.findAll();\n\n        Iterator&lt;User> iterator = userDao.findAll().iterator();\n        User next1 = iterator.next();\n\n        System.out.println(next1.toString());\n    }\n    public void save(){\n        User user = new User();\n        user.setId("1");\n        user.setName("client1");\n        user.setNamespace("elasticsearch:client1");\n        user.setPhone("111");\n        User save = userDao.save(user);\n        System.out.println(save.toString());\n    }\n}\n\n')])])])]),e._v(" "),t("li",[t("p",[e._v("Test")]),e._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("@RunWith(SpringRunner.class)\n@SpringBootTest\npublic class ClientApplicationTests {\n    @Autowired\n    private TestService testService;\n    @Test\n    public void findAll(){\n        testService.findAll();\n    }\n    @Test\n    public void save(){\n        testService.save();\n    }\n}\n\n")])])])])]),e._v(" "),t("h3",{attrs:{id:"client2-2"}},[e._v("client2")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("Dao")]),e._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("@Repository\npublic interface UserDao extends CrudRepository&lt;User,String> {\n}\n")])])])]),e._v(" "),t("li",[t("p",[e._v("Service")]),e._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('@Service\npublic class TestService {\n    @Autowired\n    private UserDao userDao;\n    public void findAll(){\n        Iterable&lt;User> all = userDao.findAll();\n\n        Iterator&lt;User> iterator = userDao.findAll().iterator();\n        User next1 = iterator.next();\n\n        System.out.println(next1.toString());\n    }\n    public void save(){\n        User user = new User();\n        user.setId("2");\n        user.setName("client2");\n        user.setNamespace("elasticsearch:client2");\n        user.setPhone("222");\n        User save = userDao.save(user);\n        System.out.println(save.toString());\n    }\n}\n')])])])]),e._v(" "),t("li",[t("p",[e._v("Test")]),e._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("@RunWith(SpringRunner.class)\n@SpringBootTest\npublic class DemoApplicationTests {\n\t@Autowired\n\tprivate TestService testService;\n\t@Test\n\tpublic void findAll(){\n\t\ttestService.findAll();\n\t}\n\t@Test\n\tpublic void save(){\n\t\ttestService.save();\n\t}\n}\n")])])])])]),e._v(" "),t("h1",{attrs:{id:"测试验证"}},[e._v("测试验证")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("预期结果")]),e._v(" "),t("ul",[t("li",[e._v("生成client1.user与client2.user索引")]),e._v(" "),t("li",[e._v("访问8081返回client1用户信息，访问8082返回client2用户信息")])])]),e._v(" "),t("li",[t("p",[e._v("实际结果")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://s2.loli.net/2022/04/08/xcwEirGK51YmQCS.png",alt:"image-20220408212339570"}})])])]),e._v(" "),t("p",[t("img",{attrs:{src:"https://s2.loli.net/2022/04/08/9hV8zyrPIfGcQAp.png",alt:"image-20220408212429636"}})]),e._v(" "),t("p",[t("img",{attrs:{src:"https://s2.loli.net/2022/04/08/152SgYdPmIXGRly.png",alt:"image-20220408212455049"}})]),e._v(" "),t("h1",{attrs:{id:"总结"}},[e._v("总结")]),e._v(" "),t("p",[e._v("我们通过增加一个配置类来获取自定义的namespace,然后在类指定索引名时通过获取变量的形式去读取，这样生成的索引就会带一个前缀，也就是我们想要的namespace·，也就实现了我们最初的目标，复用同一个elasticsearch,达到节省服务器资源的目的")]),e._v(" "),t("h1",{attrs:{id:"源码地址"}},[e._v("源码地址")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("https://github.com/TianPuJun/es-demo")])]),e._v(" "),t("li",[t("p",[e._v("https://download.csdn.net/download/C1041067258/85096340")])])]),e._v(" "),t("h1",{attrs:{id:"参考链接"}},[e._v("参考链接")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://docs.spring.io/spring-data/elasticsearch/docs/4.2.10/reference/html/#elasticsearch.clients.rest",target:"_blank",rel:"noopener noreferrer"}},[e._v("SpringDataElasticsearch"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzIwNzYzODIxMw==&mid=2247484835&idx=1&sn=9140a7a926a3e53c18ea55ec44bc3f6c&chksm=970e1e09a079971fac40682bafc1dbbe26e8636fd2541b4ac549cf7bc27e5d7c74b0952900db#rd",target:"_blank",rel:"noopener noreferrer"}},[e._v("Elasticsearch 如何实现索引的伪·命名空间"),t("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=s.exports}}]);